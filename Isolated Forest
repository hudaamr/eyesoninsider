
features = ['time_since_last_event_user', 'time_since_last_event_content',
            'time_since_last_session', 'average_time_between_interactions',
            'session_duration', 'average_session_duration_user']

X = data[features]

X.fillna(X.mean(), inplace=True)
X[features] = X[features].apply(pd.to_timedelta)

X[features] = X[features].apply(lambda x: x.dt.total_seconds())

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

model_iforest = IsolationForest(contamination=0.05)  # You can adjust the 'contamination' parameter based on your dataset

model_iforest.fit(X_scaled)
anomaly_scores_iforest = model_iforest.decision_function(X_scaled)

threshold_iforest = 0  
data['anomaly_iforest'] = anomaly_scores_iforest
data['anomaly_manual_iforest'] = 'Normal'  # Initialize with 'Normal'
data.loc[data['anomaly_iforest'] <= threshold_iforest, 'anomaly_manual_iforest'] = 'Abnormal'
data['anomaly_manual_iforest'] = data['anomaly_manual_iforest'].map({'Abnormal': 1, 'Normal': 0})

plt.figure(figsize=(8, 8))
labels_iforest = ['Normal', 'Abnormal']
sizes_iforest = data['anomaly_manual_iforest'].value_counts()
colors_iforest = ['lightblue', 'salmon']
explode_iforest = (0, 0.1)  # Explode the 'Abnormal' slice for better visibility

plt.pie(sizes_iforest, labels=labels_iforest, autopct='%1.1f%%', colors=colors_iforest, explode=explode_iforest, startangle=140)
plt.title('Distribution of Anomalies and Normal Actions (Isolation Forest)')
plt.show()
