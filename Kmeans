features = ['time_since_last_event_user', 'time_since_last_event_content',
            'time_since_last_session', 'average_time_between_interactions',
            'session_duration', 'average_session_duration_user']

X = data[features]
X.fillna(X.mean(), inplace=True)
X[features] = X[features].apply(pd.to_timedelta)

X[features] = X[features].apply(lambda x: x.dt.total_seconds())

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
kmeans = KMeans(n_clusters=2)  # You can adjust the number of clusters based on your dataset

kmeans.fit(X_scaled)
cluster_labels = kmeans.labels_
threshold_kmeans = 0 # You may need to experiment with this threshold
data['anomaly_kmeans'] = 'Normal'  # Initialize with 'Normal'
data.loc[cluster_labels == 1, 'anomaly_kmeans'] = 'Abnormal'

data['anomaly_manual_kmeans'] = data['anomaly_kmeans'].map({'Abnormal': 1, 'Normal': 0})

plt.figure(figsize=(8, 8))
labels = ['Normal', 'Abnormal']
sizes = data['anomaly_manual_kmeans'].value_counts()
colors = ['skyblue', 'lightcoral']
explode = (0, 0.1)  # Explode the 'Abnormal' slice for emphasis

plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, explode=explode)
plt.title('Distribution of Anomalies and Normal Actions (K-Means)')
plt.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.
plt.show()
