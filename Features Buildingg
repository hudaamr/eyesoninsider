data = pd.read_csv('users_interactions.csv')
data
data['timestamp'] = pd.to_datetime(data['timestamp'])

data['time_since_last_event_user'] = data.sort_values('timestamp').groupby('personId')['timestamp'].diff().dt.total_seconds()
data['time_since_last_event_content'] = data.sort_values('timestamp').groupby('contentId')['timestamp'].diff().dt.total_seconds()
data['time_since_last_session'] = data.sort_values('timestamp').groupby('sessionId')['timestamp'].diff().dt.total_seconds()

user_event_frequency = data.groupby('personId')['eventType'].count().reset_index()
user_event_frequency.columns = ['personId', 'event_frequency_user']

content_event_frequency = data.groupby('contentId')['eventType'].count().reset_index()
content_event_frequency.columns = ['contentId', 'event_frequency_content']

session_event_frequency = data.groupby('sessionId')['eventType'].count().reset_index()
session_event_frequency.columns = ['sessionId', 'event_frequency_session']

data = pd.merge(data, user_event_frequency, on='personId', how='left')
data = pd.merge(data, content_event_frequency, on='contentId', how='left')
data = pd.merge(data, session_event_frequency, on='sessionId', how='left')

session_stats = data.groupby('sessionId')['timestamp'].agg(['count', 'mean']).reset_index()
session_stats.columns = ['sessionId', 'event_count_session', 'average_time_between_events']

data = pd.merge(data, session_stats, on='sessionId', how='left')
unique_users_per_content = data.groupby('contentId')['personId'].nunique().reset_index()
unique_users_per_content.columns = ['contentId', 'unique_users_per_content']

data['timestamp'] = pd.to_datetime(data['timestamp'])

data.sort_values(['personId', 'contentId', 'timestamp'], inplace=True)

data['time_diff'] = data.groupby(['personId', 'contentId'])['timestamp'].diff()

average_time_between_interactions = data.groupby('contentId')['time_diff'].mean().reset_index()

data.drop(columns=['time_diff'], inplace=True)

print(average_time_between_interactions)

average_time_between_interactions.columns = ['contentId', 'average_time_between_interactions']

data = pd.merge(data, unique_users_per_content, on='contentId', how='left')
data = pd.merge(data, average_time_between_interactions, on='contentId', how='left')
data['session_duration'] = data.groupby(['personId', 'sessionId'])['timestamp'].diff().dt.total_seconds()

average_session_duration_per_user = data.groupby('personId')['session_duration'].mean().reset_index()
average_session_duration_per_user.columns = ['personId', 'average_session_duration_user']

sessions_per_user = data.groupby('personId')['sessionId'].nunique().reset_index()
sessions_per_user.columns = ['personId', 'sessions_per_user']

data = pd.merge(data, average_session_duration_per_user, on='personId', how='left')
data = pd.merge(data, sessions_per_user, on='personId', how='left')

print(data.head())
columns_to_print = ['time_since_last_event_user', 'time_since_last_event_content', 'time_since_last_session',
                    'event_frequency_user', 'event_frequency_content', 'event_frequency_session',
                    'event_count_session', 'average_time_between_events',
                    'unique_users_per_content', 'average_time_between_interactions',
                    'average_session_duration_user', 'sessions_per_user']

missing_columns = [col for col in columns_to_print if col not in data.columns]

if not missing_columns:
   
    print(data[columns_to_print])
else:
    print(f"Error: Columns not found - {missing_columns}")

